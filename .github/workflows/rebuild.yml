name: rebuild

on:
  repository_dispatch: # Webhookからトリガーするためのイベント
    types: [rebuild]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # リポジトリのコードをチェックアウト
      - name: Checkout code
        uses: actions/checkout@v3

      # Node.js のセットアップ
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      # 依存関係をインストール
      - name: Install dependencies
        run: npm install

      # ビルド
      - name: Build project
        run: npm run build

      # ビルドされたアーティファクトを ZIP ファイルにまとめる
      - name: Create ZIP file
        run: zip -r release.zip ./dist

      # アーティファクトをアップロードして GitHub リリースを作成
      - name: Get current date and time
        id: get_datetime
        run: echo "RELEASE_DATETIME=$(date '+%Y-%m-%d-%H%M%S')" >> $GITHUB_ENV

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          tag: release-${{ env.RELEASE_DATETIME }}
          name: Release ${{ env.RELEASE_DATETIME }}
          body: |
            ## Changes in this release:
            - Describe your changes here
          artifacts: release.zip

      # 前回のリリースを取得
      - name: Get previous release
        id: get_release
        uses: actions/github-script@v6
        with:
          script: |
            const { data: releases } = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            if (releases.length > 0) {
              core.setOutput('previous_release', releases[0].tag_name);
            } else {
              core.setOutput('previous_release', null);
            }

      # 前回のリリースファイルをダウンロード
      - name: Download previous release asset
        if: steps.get_release.outputs.previous_release != null
        run: |
          curl -L -o previous_release.zip $(curl -s https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ steps.get_release.outputs.previous_release }} | jq -r '.assets[0].browser_download_url')

      # ダウンロードした前回のリリースを解凍
      - name: Unzip previous release
        if: steps.get_release.outputs.previous_release != null
        run: unzip previous_release.zip -d previous_build

      # 現在のビルドも解凍
      - name: Unzip current build
        run: unzip release.zip -d current_build

      - name: List files in previous build
        run: ls -l previous_build

      - name: List files in current build
        run: ls -l current_build

      - name: Generate diff between current and previous build
        run: |
          set +o pipefail  # パイプライン失敗時に処理を続ける
          diff -qr previous_build current_build | grep '^Only in' > diff.txt || echo "No differences found."

      - name: Copy changed files to diff directory
        run: |
          mkdir -p diff_build
          cat diff.txt | while read line; do
            src_path=$(echo $line | awk '{print $3 "/" $4}')
            dest_path=$(echo $line | sed 's|Only in ||' | awk '{print $2}')
            if [ -d $src_path ]; then
              cp -r $src_path diff_build/$dest_path
            else
              cp $src_path diff_build/$dest_path
            fi
          done

      # 差分をZIP化
      - name: Zip the diff files
        run: zip -r diff_release.zip ./diff_build

      # 差分ZIPをアップロード
      - name: Upload diff ZIP
        uses: actions/upload-artifact@v3
        with:
          name: diff_build
          path: ./diff_release.zip

      - name: 📂 Sync files
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          local-dir: ./
          server-dir: web/testup.website/deploy-test/
          exclude: |
            **/.git*
            **/.git*/**
            **/node_modules/**
            **/src/**
            **/public/**
            **/dist/**
            **/tsconfig.json/**
            **/.vscode/**
            **/.astro/**
            **/README.md*
            **/package.json*
            **/astro.config.mjs*
            fileToExclude.txt
