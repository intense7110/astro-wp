name: rebuild

on:
  repository_dispatch: # Webhookからトリガーするためのイベント
    types: [rebuild]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # リポジトリのコードをチェックアウト
      - name: Checkout code
        uses: actions/checkout@v3

      # Node.js のセットアップ
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      # 依存関係をインストール
      - name: Install dependencies
        run: npm install

      # ビルド
      - name: Build project
        run: npm run build

      # ビルドされたアーティファクトを ZIP ファイルにまとめる
      - name: Create ZIP file
        run: zip -r release.zip ./dist

      # アーティファクトをアップロードして GitHub リリースを作成
      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.ref }}
          name: Release ${{ github.ref }}
          body: |
            ## Changes in this release:
            - Describe your changes here
          artifacts: release.zip

      # - name: Get current date and time
      #   id: get_datetime
      #   run: echo "RELEASE_DATETIME=$(date '+%Y-%m-%d-%H%M%S')" >> $GITHUB_ENV

      # - name: Create GitHub Release
      #   id: create_release
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     tag_name: 'release-${{ env.RELEASE_DATETIME }}'
      #     release_name: 'Release ${{ env.RELEASE_DATETIME }}'
      #     draft: false
      #     prerelease: false

      # - name: Upload ZIP to Release
      #   uses: actions/upload-release-asset@v1
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: ./build.zip
      #     asset_name: build.zip
      #     asset_content_type: application/zip

      # - name: Get previous release
      #   id: get_release
      #   uses: actions/github-script@v6
      #   with:
      #     script: |
      #       const { data: releases } = await github.rest.repos.listReleases({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo
      #       });
      #       if (releases.length > 0) {
      #         core.setOutput('previous_release', releases[0].tag_name);
      #       } else {
      #         core.setOutput('previous_release', null);
      #       }

      # - name: Download previous release asset
      #   if: steps.get_release.outputs.previous_release != null
      #   run: |
      #     curl -L -o previous_build.zip $(curl -s https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ steps.get_release.outputs.previous_release }} | jq -r '.assets[0].browser_download_url')

      # - name: Unzip previous release asset
      #   if: steps.get_release.outputs.previous_release != null
      #   run: unzip previous_build.zip -d previous_build

      # - name: Unzip current build
      #   run: unzip build.zip -d current_build

      # - name: Diff current and previous builds
      #   if: steps.get_release.outputs.previous_release != null
      #   run: diff -r previous_build current_build

      # - name: 📂 Sync files
      #   uses: SamKirkland/FTP-Deploy-Action@v4.3.5
      #   with:
      #     server: ${{ secrets.FTP_SERVER }}
      #     username: ${{ secrets.FTP_USERNAME }}
      #     password: ${{ secrets.FTP_PASSWORD }}
      #     local-dir: ./dist/
      #     server-dir: web/testup.website/deploy-test/
      #     exclude: |
      #       **/.git*
      #       **/.git*/**
      #       **/node_modules/**
      #       fileToExclude.txt
